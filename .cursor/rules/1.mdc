---
description: 
globs: 
alwaysApply: false
---
视频下载软件开发方案
项目名称：Universal Video Downloader (UVD)
一、开发技术栈：
•	语言：Python 3.10+
•	GUI框架：PySide6
•	下载核心：yt-dlp
•	辅助工具：FFmpeg (视频处理)
•	采用MVVM架构设计
•	其他：SQLite (数据存储), Requests (网络请求)
二、核心功能要求：
1、下载功能
•	[✓] 多平台支持(YouTube/B站/抖音/TikTok等)
•	[✓] 实现BaseDownloader抽象基类，定义统一接口
•	[✓] 元数据提取（标题/作者/缩略图/视频画质/主页地址/播放量）
•	[✓] 单视频下载
•	[✓] 频道/博主全部视频批量下载
•	[✓] 智能协议嗅探(自动识别平台)
•	[✓] 多线程下载(可配置线程数)
•	[✓] 断点续传
•	[✓] M3U8流媒体下载
•	[✓] 代理支持(SOCKS/HTTP)
•	[✓] 下载限速
•	[✓] 文件完整性校验(MD5)
•	[✓] 智能去重(覆盖/跳过/重命名选项)
•	[✓] Cookie管理(用户导入/导出)

2、数据管理
（1）历史记录系统
-使用SQLite数据库存储下载历史
-下载记录查询界面
-重复文件检测（MD5）

（2）创作者监控
-创作者管理界面（添加/删除/排序）
-创作者资料存储
-定时检查创作者更新（可配置间隔）
-新视频差异检测（对比上次记录的视频数量）
-自动下载新视频选项
-喜爱度排序（可手动调整）

3、特色功能
（1）插件（视频提取器）管理系统
-插件系统：考虑设计插件接口，方便未来支持更多网站
-自动分析url动态加载插件（视频提取器）
-能从指定目录动态加载.py文件
-每个插件文件包含一个继承BaseExtractor的类
-主程序能检测新增/删除插件
-需要安全隔离机制


三、用户界面
主界面组件
•	[✓] 主界面包含URL输入框、下载列表
•	[✓] 现代化UI(支持亮/暗主题)
•	[✓] 主界面+设置标签页布局
•	[✓] 下载列表可视化(任务缩略图、进度、任务分组、状态颜色)
•	[✓] 拖拽排序
•	[✓] 实时下载进度/速度显示
•	[✓] 魔法进度条(带宽波形图)
•	[✓] 3D Touch式右键菜单
•	[✓] 任务分组显示
•	[✓] 文件命名模板编辑器
•	[✓] 老板键+托盘最小化
•	[✓]下载路径管理
•	[✓]命名模板编辑器
•	[✓]代理配置测试
•	[✓]主题切换器
•	[✓]样式要求：1、使用外置QSS。2、支持暗黑/明亮主题
•	[✓]右键菜单分组：
     - 任务控制(开始/暂停/重新开始)
     - 批量操作(开始全部/暂停全部)
     - 文件操作(打开文件/文件夹)
     - 列表管理(删除/标记完成)

四、高级功能
•	[✓] 文件智能去重(MD5校验)
•	[✓] 浏览器指纹伪装(动态User-Agent)
•	[✓] 年龄验证绕过(成人内容平台)
•	[✓] 下载预估时间(基于历史数据)
•	[✓] 硬件加速转码

五、代码要求：
•	[✓] 类型注解全面
•	[✓] 完善的错误处理
•	[✓] 异步IO优化性能
•	[✓] 详细的开发日志记录

六、完整文件目录结构

UVDownloader/
├── docs/                   # 文档
│   └── plugin_dev.md       # 插件开发指南
├── src/
│   ├── core/               # 核心系统
│   │   ├── downloader.py   # 下载器基类
│   │   ├── exceptions.py   # 自定义异常
│   │   └── models.py       # 数据模型
│   ├── plugins/            # 平台插件
│   │   ├── youtube/        # YouTube插件
│   │   │   ├── __init__.py    # 插件注册入口
│   │   │   ├── extractor.py   # 核心提取逻辑
│   │   │   ├── api_client.py  # API封装
│   │   │   └── tests/         # 平台专属测试
│   │   ├── bilibili/       # B站插件
│   │   │   ├── danmaku.py     # 弹幕处理
│   │   │   └── sign.py        # 签名算法
│   │   └── douyin/         # 抖音插件
│   │       ├── captcha.py     # 验证码处理
│   │       └── device.py      # 设备指纹
│   ├── ui/
│   │   ├── widgets/        # 自定义控件
│   │   │   ├── progress_bar.py # 增强进度条
│   │   │   └── video_card.py   # 视频展示卡片
│   │   └── styles/         # 样式资源
│   │       ├── dark.qss       # 暗黑主题
│   │       └── light.qss      # 明亮主题
│   └── utils/             # 工具类
│       ├── network.py      # 网络请求封装
│       └── logger.py       # 日志增强
├── tests/
│   ├── unit/              # 单元测试
│   ├── integration/       # 集成测试
│   └── stress/            # 压力测试
└── resources/            # 静态资源
    ├── icons/            # 图标
    └── sounds/           # 音效


七、开发路线建议
1.	第一阶段：实现核心下载功能
o	基本界面框架、主窗口骨架搭建
o	核心下载接口设计
o	yt-dlp集成
o	单视频下载、部分网站图片下载
o	视频信息提取（标题/作者/缩略图/大小/画质/作者主页/播放量收藏量/点赞量/更新时间）
o	实现单个平台（推荐YouTube）的完整闭环
o	下载队列控制器
o	断点续传实现
o	代理支持：启动/关闭代理、代理认证(用户名/密码)、代理类型自动切换策略
o	下载设置：添加"默认下载质量"选项，文件命名模板编辑器(可视化预览)
o	插件接口规范
o	错误处理系统
o	日志记录模块





2.	第二阶段：增强功能
o	批量下载
o	频道全部视频下载
o	继续扩展多平台下载实现(B站、抖音、Twitter、Instagram)
o	错误处理
o	基础监控功能
o	数据库模型设计并实现
    -下载历史记录
    -创作者信息存储
o	历史记录系统
    -文件MD5去重
o	创作者管理系统
    -智能嗅探、频道视频扫描器
    -智能更新检测、新视频检测（基于发布时间）
    -创作者信息存储
    -定时检查更新
    -新视频自动下载
    -文件MD5去重
o	浏览器指纹伪装
o	硬件加速
o	年龄验证绕过(成人内容平台)
o	插件管理系统实现，实现插件热加载，实现自动发现插件功能
o	添加智能平台检测
o	多级回退机制：
    -优先使用官方API
    -其次尝试网页解析
    -最后使用yt-dlp通用方案
o	智能缓存系统
o	浏览器插件集成



3.	第三阶段：完善UI/UX
o	主题系统切换实现
o	动画效果
o	交互优化
o	3D Touch菜单
o	任务列表组件
    1. 视觉要求：
    - 分组显示（频道/单视频）
    - 状态颜色编码（进行中/完成/错误）
    - 实时进度显示（带速度波形图）
    2. 交互要求：
    - 右键上下文菜单（分组操作）
    - 拖拽排序支持
    - 键盘多选、鼠标+键盘组合键多选支持
    3. 代码要求：
    - 继承自QListWidget
    - 使用QSS实现样式
    - 符合MVVM架构
o	每个任务卡片显示缩略图(左侧)、标题(上部)、进度条(中部)、状态和速度(下部)
o	进度条用QSS美化

4.  第四阶段：优化与测试
o	性能优化
o	内存泄漏检测
o	下载速度优化
o	兼容性测试
o	多平台测试（Win/macOS/Linux）
o	高DPI适配验证
o	打包发布
o	PyInstaller打包配置
o	制作安装程序



八、开发要求
1. **代码怎么写**：
   - 所有功能拆成小模块（一个文件只做一件事）
   - 变量名用英文全称（比如`video_url`而不是`v_url`）
   

2. **界面要求**：
   - 主界面要有：
     - 网址输入框（能识别粘贴的链接）
     - 下载按钮（点完变灰色防重复点击）
     - 进度条（带百分比和网速显示）
   - 所有文字要能切换中英文
   - 夜间模式必须支持

3. **下载功能**：
   - 至少重试3次
   - 下载大文件时内存不能卡死（用流式下载）
   - 记住最近5条下载记录

4. **测试要求**：
   - 每个功能配一个测试例子（放在`tests/`文件夹）
   - 测试要用真实网址（比如测试用YouTube短链接）






